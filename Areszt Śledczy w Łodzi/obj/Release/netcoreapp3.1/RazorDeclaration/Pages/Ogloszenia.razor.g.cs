#pragma checksum "C:\PROJEKTY\Areszt Śledczy w Łodzi\Areszt Śledczy w Łodzi\Pages\Ogloszenia.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "15054e7c499fad76d7bd4fb40bc78c3caf0ded13"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Areszt_Śledczy_w_Łodzi.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\PROJEKTY\Areszt Śledczy w Łodzi\Areszt Śledczy w Łodzi\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\PROJEKTY\Areszt Śledczy w Łodzi\Areszt Śledczy w Łodzi\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\PROJEKTY\Areszt Śledczy w Łodzi\Areszt Śledczy w Łodzi\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\PROJEKTY\Areszt Śledczy w Łodzi\Areszt Śledczy w Łodzi\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\PROJEKTY\Areszt Śledczy w Łodzi\Areszt Śledczy w Łodzi\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\PROJEKTY\Areszt Śledczy w Łodzi\Areszt Śledczy w Łodzi\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\PROJEKTY\Areszt Śledczy w Łodzi\Areszt Śledczy w Łodzi\_Imports.razor"
using Areszt_Śledczy_w_Łodzi;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\PROJEKTY\Areszt Śledczy w Łodzi\Areszt Śledczy w Łodzi\_Imports.razor"
using Areszt_Śledczy_w_Łodzi.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\PROJEKTY\Areszt Śledczy w Łodzi\Areszt Śledczy w Łodzi\Pages\Ogloszenia.razor"
using BlazorInputFile;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\PROJEKTY\Areszt Śledczy w Łodzi\Areszt Śledczy w Łodzi\Pages\Ogloszenia.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\PROJEKTY\Areszt Śledczy w Łodzi\Areszt Śledczy w Łodzi\Pages\Ogloszenia.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\PROJEKTY\Areszt Śledczy w Łodzi\Areszt Śledczy w Łodzi\Pages\Ogloszenia.razor"
using Microsoft.AspNetCore.Hosting;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/ogloszenia")]
    public partial class Ogloszenia : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 214 "C:\PROJEKTY\Areszt Śledczy w Łodzi\Areszt Śledczy w Łodzi\Pages\Ogloszenia.razor"
       
    string ContentOgloszenie { get; set; }
    string ContentLink { get; set; }
    string color { get; set; }
    string font { get; set; }
    string caseFontColor { get; set; }
    string URL { get; set; }
    string URLToFile { get; set; }
    bool LinkAdd { get; set; }
    bool URLlink { get; set; }
    bool URLfile { get; set; }
    int IdEditingOgloszenie { get; set; }
    List<Areszt_Śledczy_w_Łodzi.Models.OgloszenieViewModel> ogloszenieViewModels;
    Areszt_Śledczy_w_Łodzi.Models.OgloszenieViewModel ogloszenieViewModel;
    List<ASdatabase.Color> colors;

    string Message = "Nie wybrałeś żadnego pliku";
    IFileListEntry selectedFiles;

    async Task ChoiceFileToUpload(IFileListEntry[] files)
    {
        selectedFiles = files.FirstOrDefault();
        if (selectedFiles != null)
        {
            var ms = new MemoryStream();
            await selectedFiles.Data.CopyToAsync(ms);

            Message = $"Zakończono ładowanie pliku: {selectedFiles.Name}           Rozmiar: {selectedFiles.Size} Bytes";
        }
        this.StateHasChanged();
    }

    private async void UploadFile()
    {
        if (selectedFiles != null)
        {
            Stream stream = await selectedFiles.ReadAllAsync(maxSizeBytes: 30000000);
            var path = $"{env.WebRootPath}\\Ogloszenia\\{selectedFiles.Name}";
            URLToFile = path;
            FileStream fs = File.Create(path);
            await stream.CopyToAsync(fs);
            stream.Close();
            fs.Close();
            Message = $"{selectedFiles.Name} plik wrzucony na serwer.";
            this.StateHasChanged();
        }
        else
        {
            Message = $"Nie ma wybranego pliku do umieszczenia go na serwerze!!!";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        color = "niebieski";
        font = "20px";
        caseFontColor = font + color;
        IdEditingOgloszenie = -1;
        ContentOgloszenie = "";
        ContentLink = "";
        URL = "";
        URLToFile = "";
        LinkAdd = false;
        URLlink = false;
        URLfile = false;

        ogloszenieViewModels = new List<Models.OgloszenieViewModel>();
        ogloszenieViewModel = new Models.OgloszenieViewModel();
        colors = new List<ASdatabase.Color>();
        await Task.Run(() =>
        {
            colors = colorServices.GetAllColors();

            ogloszenieViewModels = ogloszenieServices.GetAllOgloszenia();
        });
    }

    void ColorSelection(ChangeEventArgs args)
    {
        color = args.Value.ToString();
        caseFontColor = font + color;
    }

    void FontSelection(ChangeEventArgs args)
    {
        font = args.Value.ToString() + "px";
        caseFontColor = font + color;
    }

    void EditOgloszenie(int OgloszenieId)
    {
        var OgloszenieEntity = ogloszenieServices.FindOgloszenieById(OgloszenieId);
        ContentOgloszenie = OgloszenieEntity.Advertisement;
        var colorEntity = colorServices.FindColorById(OgloszenieEntity.ColorId);
        color = colorEntity.ColorName.ToLower();
        var fontEntity = fontServices.FindFontSizeById(OgloszenieEntity.SizeFontId);
        font = fontEntity.FontSize.ToString() + "px";
        IdEditingOgloszenie = OgloszenieEntity.Id;
        caseFontColor = font + color;

        ContentLink = OgloszenieEntity.AdvertisementURL;
        URL = OgloszenieEntity.URL;
    }

    void SaveOgloszenie()
    {
        var colorId = colorServices.FindColorByName(color);
        var fontId = fontServices.FindFontSizeBySize(font);
        var ogloszenieEntity = ogloszenieServices.FindOgloszenieById(IdEditingOgloszenie);
        ogloszenieViewModel = asMapper.Map(ogloszenieEntity);
        if (URLfile) URL = URLToFile;
        if (ogloszenieViewModel == null)
        {
            ogloszenieViewModel = new Models.OgloszenieViewModel()
            {
                Advertisement = ContentOgloszenie,
                ColorId = colorId.Id,
                SizeFontId = fontId.Id,
                AdvertisementURL = ContentLink,
                URL = URL

            };
            ogloszenieServices.SaveUpdateOgloszenie(IdEditingOgloszenie, ogloszenieViewModel);

            LinkAdd = false;
            URLlink = false;
            URLfile = false;

            navigationManager.NavigateTo("/ogloszenia", true);
        }
        else
        {
            ogloszenieViewModel.Advertisement = ContentOgloszenie;
            ogloszenieViewModel.ColorId = colorId.Id;
            ogloszenieViewModel.SizeFontId = fontId.Id;
            ogloszenieViewModel.AdvertisementURL = ContentLink;
            ogloszenieViewModel.URL = URL;

            ogloszenieServices.SaveUpdateOgloszenie(IdEditingOgloszenie, ogloszenieViewModel);
            LinkAdd = false;
            URLlink = false;
            URLfile = false;
            navigationManager.NavigateTo("/ogloszenia", true);
        }
    }

    void DeleteOgloszenie(int IdOgloszenie)
    {
        ogloszenieServices.DeleteOgloszenie(IdOgloszenie);
        navigationManager.NavigateTo("/ogloszenia", true);
    }

    string Color(int ColorId)
    {
        var color = colors.Where(x => x.Id == ColorId).FirstOrDefault();//colorServices.FindColorById(ColorId);
        return color.ColorValue;
    }

    string Font(int FontId)
    {
        var font = fontServices.FindFontSizeById(FontId);
        return font.FontSize.ToString() + "px";
    }

    void AddLinkFunction()
    {
        LinkAdd = true;
    }

    void ViewLink()
    {
        URLlink = true;
        URLfile = false;
    }

    void AddFile()
    {
        URLfile = true;
        URLlink = false;
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager navigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ASMapper asMapper { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Areszt_Śledczy_w_Łodzi.Services.ColorServices colorServices { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Areszt_Śledczy_w_Łodzi.Services.FontSizeServices fontServices { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Areszt_Śledczy_w_Łodzi.Services.OgloszenieServices ogloszenieServices { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IWebHostEnvironment env { get; set; }
    }
}
#pragma warning restore 1591
